import 'package:chat_box/services/my_service/friend_service.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

class SentRequestsTab extends StatelessWidget {
  const SentRequestsTab({super.key});

  @override
  Widget build(BuildContext context) {
    final service = FriendService();

    return StreamBuilder<QuerySnapshot>(
      stream: FirebaseFirestore.instance
          .collection("friend_requests")
          .where("senderId", isEqualTo: service.uid)
          .orderBy("createdAt", descending: true)
          .snapshots(),
      builder: (context, snap) {
        if (snap.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }

        final docs = snap.data?.docs ?? [];
        if (docs.isEmpty) {
          return const Center(child: Text("No sent requests"));
        }

        return ListView.builder(
          itemCount: docs.length,
          itemBuilder: (context, i) {
            final doc = docs[i];
            final data = doc.data() as Map<String, dynamic>;
            final receiverId = data['receiverId'] ?? '';
            final message = data['message'] ?? '';
            final status = data['status'] ?? 'pending';

            return FutureBuilder<DocumentSnapshot>(
              future: FirebaseFirestore.instance
                  .collection('users')
                  .doc(receiverId)
                  .get(),
              builder: (context, userSnap) {
                if (userSnap.connectionState == ConnectionState.waiting) {
                  return const ListTile(title: Text("Loading..."));
                }

                if (!userSnap.hasData || !userSnap.data!.exists) {
                  return const ListTile(title: Text("User not found"));
                }

                final userData =
                    userSnap.data!.data() as Map<String, dynamic>? ?? {};
                final receiverName = userData['name'] ?? 'Unknown';
                final photo = userData['photoUrl'] ?? '';

                return Card(
                  margin:
                      const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
                  elevation: 2,
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10)),
                  child: ListTile(
                    leading: CircleAvatar(
                      backgroundImage:
                          photo.isNotEmpty ? NetworkImage(photo) : null,
                      child: photo.isEmpty
                          ? Text(receiverName.isNotEmpty
                              ? receiverName[0].toUpperCase()
                              : '?')
                          : null,
                    ),
                    title: Text(
                      receiverName,
                      style: const TextStyle(fontWeight: FontWeight.bold),
                    ),
                    subtitle:
                        Text(message.isEmpty ? "Friend request" : message),
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        // Show status (Pending / Accepted / Rejected)
                        Container(
                          padding: const EdgeInsets.symmetric(
                              horizontal: 10, vertical: 6),
                          decoration: BoxDecoration(
                            color: status == "accepted"
                                ? Colors.green.withOpacity(0.2)
                                : status == "rejected"
                                    ? Colors.red.withOpacity(0.2)
                                    : Colors.orange.withOpacity(0.2),
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Text(
                            status.toUpperCase(),
                            style: TextStyle(
                              color: status == "accepted"
                                  ? Colors.green
                                  : status == "rejected"
                                      ? Colors.red
                                      : Colors.orange,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                        if (status == 'pending') ...[
                          const SizedBox(width: 8),
                          IconButton(
                            icon: const Icon(Icons.cancel, color: Colors.red),
                            tooltip: "Cancel Request",
                            onPressed: () async {
                              try {
                                await service.cancelRequest(doc.id);

                                // âœ… Safety check to avoid 'deactivated widget' error
                                if (!context.mounted) return;

                                ScaffoldMessenger.of(context)
                                  ..hideCurrentSnackBar()
                                  ..showSnackBar(const SnackBar(
                                      content: Text(
                                          "Friend request cancelled successfully")));
                              } catch (e) {
                                if (!context.mounted) return;

                                ScaffoldMessenger.of(context)
                                  ..hideCurrentSnackBar()
                                  ..showSnackBar(SnackBar(
                                      content: Text("Error: $e")));
                              }
                            },
                          ),
                        ]
                      ],
                    ),
                  ),
                );
              },
            );
          },
        );
      },
    );
  }
}
